package portfolio.manager.ejb;

import java.util.Date;
import java.util.List;

import javax.ejb.Local;
import javax.ejb.Remote;
import javax.ejb.Stateful;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import portfolio.manager.jpa.Holding;
import portfolio.manager.jpa.Portfolio;
import portfolio.manager.jpa.Stock;
import portfolio.manager.jpa.User;

/**
 * Session Bean implementation class PortfolioManagerBean
 */
@Stateful
@Remote(PortfolioManagerBeanRemote.class)
@Local(PortfolioManagerBeanLocal.class)
public class PortfolioManagerBean implements PortfolioManagerBeanRemote, PortfolioManagerBeanLocal {

	@PersistenceContext(unitName = "PortfolioManagerJPA-PU")
	private EntityManager em;

	public PortfolioManagerBean() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void addUser(String fname, String lname) {
		User u = new User();
		u.setFirstName(fname);
		u.setLastName(lname);
		em.persist(u);
	}
	
	@Override
	public List<User> getAllUsers() {
		TypedQuery<User> query = em.createQuery("SELECT u FROM User AS u", User.class);
		List<User> users = query.getResultList();
		return users;
	}
	
	@Override
	public void addPortfolio(int userID, String portfolioName) {
		Portfolio p = new Portfolio();
		User user = em.find(User.class, userID);
		p.setUser(user);
		p.setPortfolioName(portfolioName);
		p.setLastUpdated(new Date());
		em.persist(p);
	}
	
	@Override
	public List<Portfolio> getPortfolio() {
		TypedQuery<Portfolio> query = em.createQuery("SELECT p FROM Portfolio AS p", Portfolio.class);
		List<Portfolio> portfolios = query.getResultList();
		return portfolios;
	}
	
	@Override
	public List<Portfolio> getPortfolioByID( int portfolioID) {
		String sql = "SELECT p FROM Portfolio AS p WHERE p.portfolioID = " + portfolioID;
		TypedQuery<Portfolio> query = em.createQuery(sql, Portfolio.class);
		List<Portfolio> portfolio = query.getResultList();
		return portfolio;
	}
	
	@Override
	public List<Holding> getHoldingsByPortfolioID( int portfolioID) {
		TypedQuery<Holding> query = em.createQuery("SELECT h FROM Holding AS h WHERE h.portfolio = :name", Holding.class);
        query.setParameter("name", em.find(Portfolio.class, portfolioID));
		List<Holding> holdings = query.getResultList();
		return holdings;
	}
	
	@Override
	public List<Holding> getAggHoldingsByPortfolioID( int portfolioID) {
		TypedQuery<Holding> query = em.createQuery("SELECT h FROM Holding AS h WHERE h.portfolio = :name GROUP BY h.ticker", Holding.class);
        query.setParameter("name", em.find(Portfolio.class, portfolioID));
		List<Holding> holdings = query.getResultList();
		return holdings;
	}
	
	@Override
	public boolean removePortfolio (int portfolioID) {
		Query query_del_holding = em.createQuery("DELETE FROM Holding AS h WHERE h.portfolio = :name");
        query_del_holding.setParameter("name", em.find(Portfolio.class, portfolioID));
		query_del_holding.executeUpdate();
		
		Query query_del = em.createQuery("DELETE FROM Portfolio p WHERE p.portfolioID = :set");
		int delStatus = query_del.setParameter("set", portfolioID).executeUpdate();
		
		if(delStatus == 1) {
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	public boolean addHolding(int portfolioID, double buyPrice, int buyQuantity, String ticker, Date buyDate) {

		String sql_check = "SELECT s FROM Stock AS s WHERE s.ticker = '" + ticker + "' AND s.date = ?";
		TypedQuery <Stock> query_check = em.createQuery(sql_check, Stock.class);
		query_check.setParameter(1, buyDate);
		List<Stock> s_check = query_check.getResultList();
		if(s_check.isEmpty()) {
			return false;
		}				
		Holding h = new Holding();		
		String sql_s = "SELECT s FROM Stock AS s WHERE s.ticker = '" + ticker + "' AND s.date = ?";
		TypedQuery <Stock> query_s = em.createQuery(sql_s, Stock.class);
		query_s.setParameter(1, buyDate);
		Stock s = query_s.getSingleResult();
		h.setStock(s);
		Portfolio p_ref = em.find(Portfolio.class, portfolioID);
		h.setPortfolio(p_ref);
		h.setBuyDate(buyDate);
		h.setBuyPrice(buyPrice);
		h.setBuyQuantity(buyQuantity);
		h.setTicker(ticker);
		em.persist(h);
		
		return true;
	}
	
	@Override
	public int removeHolding(int holdingID) {
		Query query = em.createQuery("DELETE FROM Holding h WHERE h.holdingID = :set");
		int deleteStatus = query.setParameter("set", holdingID).executeUpdate();
		return deleteStatus;
	}
	
	public double calculatePortfolioValuation(int portfolioID) {
		Query query = em.createNativeQuery(
				"SELECT buyQuantity, close FROM Holding h join Stock s on s.ticker = h.ticker where fk_portfolioID = :ID and date = :date");
		query.setParameter("ID", portfolioID);
		query.setParameter("date", "2013-03-29");
		List<Object[]> list = query.getResultList();
		double sum = 0;
		for (Object[] o : list) {
			int quantity = (int) o[0];
			double close = (double) o[1];
			sum += quantity * close;
		}
		return sum;

		
	}
}
