package portfolio.manager.ejb;

import java.util.Date;
import java.util.List;

import javax.ejb.Local;
import javax.ejb.Remote;
import javax.ejb.Stateful;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import portfolio.manager.jpa.Holding;
import portfolio.manager.jpa.Portfolio;
import portfolio.manager.jpa.User;

/**
 * Session Bean implementation class PortfolioManagerBean
 */
@Stateful
@Remote(PortfolioManagerBeanRemote.class)
@Local(PortfolioManagerBeanLocal.class)
public class PortfolioManagerBean implements PortfolioManagerBeanRemote, PortfolioManagerBeanLocal {

	@PersistenceContext(unitName = "PortfolioManagerJPA-PU")
	private EntityManager em;

	public PortfolioManagerBean() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void addUser(String fname, String lname) {
		User u = new User();
		u.setFirstName(fname);
		u.setLastName(lname);
		em.persist(u);
	}
	
	@Override
	public List<User> getAllUsers() {
		TypedQuery<User> query = em.createQuery("SELECT u FROM User AS u", User.class);
		List<User> users = query.getResultList();
		return users;
	}
	
	@Override
	public void addPortfolio(int userID, String portfolioName) {
		Portfolio p = new Portfolio();
		User user = em.find(User.class, userID);
		p.setUser(user);
		p.setPortfolioName(portfolioName);
		p.setLastUpdated(new Date());
		em.persist(p);
	}
	
	@Override
	public List<Portfolio> getPortfolio() {
		TypedQuery<Portfolio> query = em.createQuery("SELECT p FROM Portfolio AS p", Portfolio.class);
		List<Portfolio> portfolios = query.getResultList();
		return portfolios;
	}
	
	@Override
	public List<Portfolio> getPortfolioByID( int portfolioID) {
		String sql = "SELECT p FROM Portfolio AS p WHERE p.portfolioID = " + portfolioID;
		TypedQuery<Portfolio> query = em.createQuery(sql, Portfolio.class);
		List<Portfolio> portfolio = query.getResultList();
		return portfolio;
	}
	
	@Override
	public List<Holding> getHoldingsByPortfolioID( int portfolioID) {
		
		TypedQuery<Holding> query = em.createQuery("SELECT h FROM Holding AS h WHERE h.portfolio = :name", Holding.class);
        query.setParameter("name", em.find(Portfolio.class, portfolioID));
		List<Holding> holdings = query.getResultList();
		System.out.println("result list" + holdings);
		return holdings;
	}
	
	
	@Override
	public void addHolding(int portfolioID, double buyPrice, int buyQuantity, String ticker) {
		Holding h = new Holding();
		String sql_p = "SELECT p FROM Portfolio AS p WHERE p.portfolioID = " + portfolioID;
		TypedQuery<Portfolio> query_p = em.createQuery(sql_p, Portfolio.class);
		List<Portfolio> p = query_p.getResultList();
		for (Portfolio port: p) {
			h.setPortfolio(port);
			break;
        }
		h.setBuyDate(new Date());
		h.setBuyPrice(buyPrice);
		h.setBuyQuantity(buyQuantity);
		h.setTicker(ticker);
		em.persist(h);
	}
	
	@Override
	public int removeHolding(int holdingID) {
//		Query query = em.createQuery("SELECT u FROM User AS u", Holding.class);
//		List<User> users = query.getResultList();
		Query query = em.createQuery("DELETE FROM Holding h WHERE h.holdingID = :set");
		int deleteStatus = query.setParameter("set", holdingID).executeUpdate();
		return deleteStatus;
	}
}
